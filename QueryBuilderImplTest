import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;

import java.util.Arrays;
import java.util.Collections;

class QueryBuilderImplTest {

    private QueryBuilderImpl queryBuilder;
    private FilterParams filterParams;

    @BeforeEach
    void setup() {
        queryBuilder = new QueryBuilderImpl();
        filterParams = mock(FilterParams.class);
    }

    @Test
    void testFieldQuery_WithNullFilterParams_ShouldReturnEmptyQuery() throws Exception {
        Query query = queryBuilder.fieldQuery(null);
        assertNotNull(query);
        assertTrue(query.getCriteria().isEmpty());
    }

    @Test
    void testFieldQuery_WithValidFilterParams_ShouldAddCriteria() throws Exception {
        when(filterParams.getTransactionStatus()).thenReturn(Arrays.asList("SUCCESS", "FAILED"));

        // Assuming FilterField.TRANSACTION_STATUS has the default operator ARRAY
        Query query = queryBuilder.fieldQuery(filterParams);

        assertNotNull(query);
        assertFalse(query.getCriteria().isEmpty());
        Criteria criteria = query.getCriteria().get(0);
        assertEquals("transactionStatus", criteria.getKey());
        assertEquals(Arrays.asList("SUCCESS", "FAILED"), criteria.getCriteriaObject().get("$in"));
    }

    @Test
    void testFieldQuery_WithRangeDate_ShouldAddRangeCriteria() throws Exception {
        when(filterParams.getCreatedAt()).thenReturn(new DateRange("RANGE", "2024-01-01", "2024-01-31"));

        // Assuming FilterField.CREATED_AT is mapped to "createdAt"
        Query query = queryBuilder.fieldQuery(filterParams);

        assertNotNull(query);
        assertFalse(query.getCriteria().isEmpty());
        Criteria criteria = query.getCriteria().get(0);
        assertEquals("createdAt", criteria.getKey());
        assertTrue(criteria.getCriteriaObject().containsKey("$gte"));
        assertTrue(criteria.getCriteriaObject().containsKey("$lte"));
    }

    @Test
    void testFieldQuery_WithBooleanArray_ShouldAddBooleanCriteria() throws Exception {
        when(filterParams.getBooleanField()).thenReturn(Arrays.asList("true", "false"));

        // Assuming FilterField.BOOLEAN_FIELD is mapped to "booleanField"
        Query query = queryBuilder.fieldQuery(filterParams);

        assertNotNull(query);
        assertFalse(query.getCriteria().isEmpty());
        Criteria criteria = query.getCriteria().get(0);
        assertEquals("booleanField", criteria.getKey());
        assertEquals(Arrays.asList(true, false), criteria.getCriteriaObject().get("$in"));
    }

    @Test
    void testFieldQuery_WithLikeOperator_ShouldAddRegexCriteria() throws Exception {
        when(filterParams.getResponseCode()).thenReturn("200");

        // Assuming FilterField.RESPONSE_CODE has the default operator LIKE
        Query query = queryBuilder.fieldQuery(filterParams);

        assertNotNull(query);
        assertFalse(query.getCriteria().isEmpty());
        Criteria criteria = query.getCriteria().get(0);
        assertEquals("responseCode", criteria.getKey());
        assertEquals("200", criteria.getCriteriaObject().get("$regex"));
    }
}
