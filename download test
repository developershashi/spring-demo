import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;

import java.io.File;
import java.io.FileInputStream;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

class DownloadControllerTest {

    @Mock
    private DownloadService downloadService;

    @InjectMocks
    private DownloadController downloadController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testDownloadTransactions_Success() throws Exception {
        // Arrange
        Map<String, String> reqParams = new HashMap<>();
        reqParams.put("filter", "value");

        Pageable pageable = PageRequest.of(0, 1000);
        DownloadRequest downloadRequest = new DownloadRequest(); // Assume this is a valid object
        File mockFile = new File("mockFile.txt");

        when(downloadService.downloadTransactions(reqParams, pageable, downloadRequest)).thenReturn(mockFile);

        // Act
        ResponseEntity<Resource> response = downloadController.downloadTransactions(reqParams, pageable, downloadRequest);

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("attachment;filename=" + mockFile.getName(), 
                     response.getHeaders().getFirst(HttpHeaders.CONTENT_DISPOSITION));
        assertEquals(mockFile.length(), response.getBody().contentLength());
        verify(downloadService, times(1)).downloadTransactions(reqParams, pageable, downloadRequest);
    }

    @Test
    void testDownloadTransactions_InternalServerError() throws Exception {
        // Arrange
        Map<String, String> reqParams = new HashMap<>();
        Pageable pageable = PageRequest.of(0, 1000);
        DownloadRequest downloadRequest = new DownloadRequest(); // Assume this is a valid object

        when(downloadService.downloadTransactions(reqParams, pageable, downloadRequest)).thenThrow(new RuntimeException("Error"));

        // Act
        ResponseEntity<Resource> response = downloadController.downloadTransactions(reqParams, pageable, downloadRequest);

        // Assert
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
        verify(downloadService, times(1)).downloadTransactions(reqParams, pageable, downloadRequest);
    }
}
