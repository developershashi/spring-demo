Feature	Legal Entity APIs (/lei)	Mandate Restrictions Service (/mandates)	Cache Microservice (/cache)
Primary Class	LegalEntitiesResource	MandatesResource	CacheResource
Core Delegate	BrokerServiceDelegate	BrokerServiceDelegate	BrokerServiceDelegate
Key DAO	EmmaLegalEntityDao	EmmaVolckerDAO	RadarDao, GenericDAOFactory
Finders Used	EmmaLegalEntityDetailFinder, RadarBrokerDetailFinder, EmmaMifidFirmFinder	EmmaVolckerRuleFinder, RadarAccountFinder	RadarBrokerDetailFinder, RadarBrokerUmrReadyFinder, RadarClearingMerchantFinder, RadarRelatedBrokerFinder, RadarBrokerPerDeskFinder, RadarDeskToDeskGroupFinder
Database Views	EmmaLegalEntitiesView, RadarBrokerDetailsView, EmmaMifidFirmView	EmmaVolckerRuleView, RadarAccountsView, RadarAccountDetailsView	RadarBrokerDetailsView, RadarBrokerUmrReadyView, RadarClearingMerchantView, RadarRelatedBrokerlineView, RadarBrokerPerDeskView, RadarDeskToDeskGroupView (cdb)
Main Use Cases	Fetch legal entities, lookups by LEI/EMMA ID, portfolio/account queries	Determine Volcker 23A mandate scope and retrieve all mandates	View, clear, and manage application-level caches for legal entities, brokers, mandates, and desk groupings
Input Type	Mostly query params (GET)	JSON body (POST), query params (GET)	Query params (GET), no body (for clear APIs: POST)
Output	Legal entity details (EMMA ID, legalEntityId, country, etc.)	Mandate info with Volcker compliance, EMMA details	Cache clearing status, cache statistics (hit/miss), and operation outcome
Cache Operations	Not directly exposed	Not directly exposed	clearCache() clears all, clearGuidelinesCache() for guideline-level entries, clearRadarCache() for Radar-related entries, viewCacheStats() returns cache summary. Delegates to GenericDAOFactory and RadarDao.
Cache Triggers	NA	NA	RadarBrokerDetailsView, RadarBrokerUmrReadyView, RadarClearingMerchantView, and RadarBrokerPerDeskView – preloaded at app startup. RadarRelatedBrokerlineView and RadarDeskToDeskGroupView – updated on changes. clearRadarCache() triggers cache invalidation. Cache rebuild happens through DAO reload methods like loadGuidelinesCache(), reloadGuidelinesCache(), etc.
Views to Tables Map	EmmaLegalEntitiesView → emma_legal_entitiesEmmaMifidFirmView → mifid_firms	EmmaVolckerRuleView → emma_volcker_rulesRadarAccountsView → radar_accounts	RadarBrokerDetailsView → brokers + desksRadarBrokerUmrReadyView → brokersRadarClearingMerchantView → clearing_merchantsRadarRelatedBrokerlineView → related_brokerlines + brokersRadarBrokerPerDeskView → brokers + desksRadarDeskToDeskGroupView → cdb.entity + cdb.entity_role + cdb.entity_flag
Cache Initialization	NA	NA	Happens at app startup for most views. Uses DAO classes such as RadarDao or GenericDAOFactory. RadarDao.clearCache() and GenericDAOFactory.clearGuidelinesCache() clear and reload cache when required.
APIs Calling Cache	NA	NA	/cache/clear → full clear/cache/clear/radar → clears only Radar views/cache/stats → stats reportAll use BrokerServiceDelegate which connects to DAO layer for execution
DAO Classes and Ops	EmmaLegalEntityDao: getLegalEntitiesOperation() and other data fetch methods	EmmaVolckerDAO: mandate-specific retrieval logic	RadarDao: clearCache(), removeUnapprovedBrokers(), createBrokerLineOperation(), isCreditValidBroker()GenericDAOFactory: clearGuidelinesCache(), reloadGuidelinesCache(), viewCacheStatsSummary()
Finder Layer	EmmaLegalEntityDetailFinder, RadarBrokerDetailFinder	EmmaVolckerRuleFinder	RadarBrokerDetailFinder, RadarDeskToDeskGroupFinder, etc. → Used for in-memory data fetch and joins after initial view loading

