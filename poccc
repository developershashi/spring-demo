<dependencies>
    <!-- Spring Boot Starter Web -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- Spring Boot Starter Data JPA (for Hibernate) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>

    <!-- Sybase JDBC Driver -->
    <dependency>
        <groupId>net.sourceforge.jtds</groupId>
        <artifactId>jtds</artifactId>
        <version>1.3.1</version>  <!-- Check for latest version -->
    </dependency>

    <!-- HikariCP Connection Pool -->
    <dependency>
        <groupId>com.zaxxer</groupId>
        <artifactId>HikariCP</artifactId>
        <version>5.0.1</version>
    </dependency>

    <!-- Lombok (Optional for reducing boilerplate code) -->
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <scope>provided</scope>
    </dependency>
</dependencies>


2 src/main/resources/application.properties
# âœ… Sybase Database Configuration
spring.datasource.url=jdbc:jtds:sybase://nhamdsa11.ny.gsam.gs.com:6789/brokerservice
spring.datasource.username=brokerservice_admin
spring.datasource.password=brokerservice_pa55
spring.datasource.driver-class-name=net.sourceforge.jtds.jdbc.Driver

# âœ… HikariCP Connection Pool Settings
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=3
spring.datasource.hikari.connection-timeout=10000
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.pool-name=SybaseHikariCP

# âœ… Hibernate JPA Properties
spring.jpa.database-platform=org.hibernate.dialect.SybaseDialect
spring.jpa.hibernate.ddl-auto=none   # We are not creating tables, just using the view
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

3. CREATE VIEW v_employee_details AS
SELECT id, name, email, department FROM employees;
4. src/main/java/com/example/entity/EmployeeView.java
package com.example.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.Getter;
import lombok.Setter;

@Entity
@Table(name = "v_employee_details")  // Refers to the SQL View
@Getter
@Setter
public class EmployeeView {

    @Id
    private Integer id;   // Primary Key
    private String name;
    private String email;
    private String department;
}
5. src/main/java/com/example/repository/EmployeeViewRepository.java
package com.example.repository;

import com.example.entity.EmployeeView;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface EmployeeViewRepository extends JpaRepository<EmployeeView, Integer> {
    List<EmployeeView> findByDepartment(String department);
}

6. src/main/java/com/example/service/EmployeeService.java
package com.example.service;

import com.example.entity.EmployeeView;
import com.example.repository.EmployeeViewRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class EmployeeService {

    private final EmployeeViewRepository repository;

    public EmployeeService(EmployeeViewRepository repository) {
        this.repository = repository;
    }

    public List<EmployeeView> getAllEmployees() {
        return repository.findAll();
    }

    public List<EmployeeView> getEmployeesByDepartment(String department) {
        return repository.findByDepartment(department);
    }
}

7 src/main/java/com/example/controller/EmployeeController.java
package com.example.controller;

import com.example.entity.EmployeeView;
import com.example.service.EmployeeService;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/employees")
public class EmployeeController {

    private final EmployeeService service;

    public EmployeeController(EmployeeService service) {
        this.service = service;
    }

    // âœ… Get All Employees from the View
    @GetMapping
    public List<EmployeeView> getAllEmployees() {
        return service.getAllEmployees();
    }

    // âœ… Get Employees by Department
    @GetMapping("/department/{dept}")
    public List<EmployeeView> getEmployeesByDepartment(@PathVariable String dept) {
        return service.getEmployeesByDepartment(dept);
    }
}

8.  database configuration:

package com.example.config;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import jakarta.persistence.EntityManagerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;

import javax.sql.DataSource;
import java.util.Properties;

@Configuration
public class DatabaseConfig {

    private final Environment env;

    public DatabaseConfig(Environment env) {
        this.env = env;
    }

    // ðŸ”¹ Configuring HikariCP DataSource
    @Bean
    public DataSource dataSource() {
        HikariConfig hikariConfig = new HikariConfig();
        hikariConfig.setJdbcUrl(env.getProperty("spring.datasource.url"));
        hikariConfig.setUsername(env.getProperty("spring.datasource.username"));
        hikariConfig.setPassword(env.getProperty("spring.datasource.password"));
        hikariConfig.setDriverClassName(env.getProperty("spring.datasource.driver-class-name"));
        
        // ðŸ”¹ Connection Pool Settings
        hikariConfig.setMaximumPoolSize(100);
        hikariConfig.setMinimumIdle(3);
        hikariConfig.setIdleTimeout(30000);
        hikariConfig.setConnectionTimeout(10000);
        hikariConfig.setValidationTimeout(5000);
        hikariConfig.setLeakDetectionThreshold(15000);
        hikariConfig.setPoolName("SybaseHikariCP");

        return new HikariDataSource(hikariConfig);
    }

    // ðŸ”¹ Configuring EntityManagerFactory
    @Bean
    public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource) {
        LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();
        em.setDataSource(dataSource);
        em.setPackagesToScan("com.example.model"); // Change to your package

        HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();
        em.setJpaVendorAdapter(vendorAdapter);

        // ðŸ”¹ Hibernate Properties
        Properties properties = new Properties();
        properties.put("hibernate.dialect", "org.hibernate.dialect.SybaseDialect");
        properties.put("hibernate.hbm2ddl.auto", "none"); // No DB changes
        properties.put("hibernate.show_sql", "true");
        properties.put("hibernate.format_sql", "true");

        em.setJpaProperties(properties);
        return em;
    }

    // ðŸ”¹ Configuring Transaction Manager
    @Bean
    public JpaTransactionManager transactionManager(EntityManagerFactory entityManagerFactory) {
        return new JpaTransactionManager(entityManagerFactory);
    }
}



