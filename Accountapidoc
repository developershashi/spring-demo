# API Documentation: /account Endpoint

## Overview

The `/account` endpoint retrieves Legal Entity Identifier (LEI) details from the EMMA system based on a provided `radarPortfolioId`. It uses caching, query optimization, and a layered architecture to enhance performance and reliability.

## API Details

### HTTP Method: GET

### Path: `/account`

### Description

Fetches legal entity details associated with a given `radarPortfolioId`. The response is a list of `LegalEntityDetailsImpl` objects. If no data is found, it returns an appropriate error message.

### Annotations

- `@GET`: Defines an HTTP GET method.
- `@Path("/account")`: Specifies the API path.
- `@ApiOperation`: Provides API metadata, including description and response type.
- `@Consumes(APPLICATION_JSON)`: Specifies JSON as the accepted input format.
- `@Produces(APPLICATION_JSON)`: Specifies JSON as the output format.
- `@ManagedAsync`: Enables asynchronous processing.

## Request Parameters

- `@QueryParam("radarPortfolioId") String radarPortfolioId`: The unique identifier of the portfolio.

## Response Codes

- **200 OK**: Returns a JSON list of `LegalEntityDetails`.
- **400 Bad Request**: If `radarPortfolioId` is null or empty.
- **404 Not Found**: If no legal entity data is found.
- **500 Internal Server Error**: If an exception occurs.

## Implementation

### Controller: `AccountController`

**Path:** `com.example.api.AccountController`

```java
@GET
@Path("/account")
@ApiOperation(
    value = "Look-up the LEI details from EMMA for a specific single account",
    notes = "Result is not paged",
    response = LegalEntityDetailsImpl.class,
    responseContainer = "List"
)
@Consumes(APPLICATION_JSON)
@Produces(APPLICATION_JSON)
@ManagedAsync
public Response getLeiForSingleAccount(@QueryParam("radarPortfolioId") String radarPortfolioId) {
    try {
        if (radarPortfolioId == null || radarPortfolioId.isEmpty()) {
            return Response.status(Status.BAD_REQUEST)
                .entity("Portfolio ID value must be valid. Please check.")
                .build();
        }
        
        List<LegalEntityDetails> legalEntityDetails = brokerServiceDelegate.getLegalEntityForPortfolio(radarPortfolioId);
        
        if (legalEntityDetails != null) {
            return Response.ok(legalEntityDetails).build();
        } else {
            return Response.status(Status.NOT_FOUND)
                .entity("No Legal Entity data found")
                .build();
        }
    } catch (Exception e) {
        Logger.error(e.getMessage(), e);
        return Response.status(Status.INTERNAL_SERVER_ERROR)
            .entity(String.format(
                "Error retrieving details for legal entity of Portfolio ID [%s]. Exception: [%s]",
                radarPortfolioId, e.getMessage()
            ))
            .build();
    }
}
```

## Service Layer

### `BrokerServiceDelegate`

**Path:** `com.example.service.BrokerServiceDelegate`

Handles business logic and interacts with `EmmaDAOFactory`.

```java
public List<LegalEntityDetails> getLegalEntityForPortfolio(String radarPortfolioId) {
    return emmaDaoFactory.getEmmaLegalEntityDAO().getLegalEntityForPortfolio(radarPortfolioId);
}
```

### `EmmaDAOFactory`

**Path:** `com.example.dao.EmmaDAOFactory`

Provides an instance of `EmmaLegalEntityDAO`.

```java
public EmmaLegalEntityDAO getEmmaLegalEntityDAO() {
    return new EmmaLegalEntityDAO(new LegalEntityDetailConverter());
}
```

## Data Access Layer

### `EmmaLegalEntityDAO`

**Path:** `com.example.dao.EmmaLegalEntityDAO`

Handles database access and caching.

```java
public class EmmaLegalEntityDAO {
    private final LegalEntityDetailConverter converter;
    private final QueryCache queryCache;
    
    public EmmaLegalEntityDAO(LegalEntityDetailConverter converter) {
        this.converter = converter;
        this.queryCache = new QueryCache();
    }
    
    public List<LegalEntityDetails> getLegalEntityForPortfolio(String radarPortfolioId) {
        CachedQuery cachedQuery = queryCache.findByEquality(radarPortfolioId);
        if (cachedQuery != null) {
            return cachedQuery.getResult();
        }
        
        List<LegalEntityDetails> results = fetchFromDatabase(radarPortfolioId);
        queryCache.storeQueryResults(radarPortfolioId, results);
        
        return results;
    }
    
    private List<LegalEntityDetails> fetchFromDatabase(String radarPortfolioId) {
        // Database query logic here
        return new ArrayList<>();
    }
}
```

## Caching and Query Optimization

### `QueryCache`

**Path:** `com.example.cache.QueryCache`

Implements caching to reduce database load.

```java
public class QueryCache {
    private final Map<String, CachedQuery> cache = new ConcurrentHashMap<>();
    
    public CachedQuery findByEquality(String key) {
        return cache.get(key);
    }
    
    public void storeQueryResults(String key, List<LegalEntityDetails> results) {
        cache.put(key, new CachedQuery(key, results));
    }
}
```

### `CachedQuery`

**Path:** `com.example.cache.CachedQuery`

Stores query results in memory.

```java
public class CachedQuery {
    private final String key;
    private final List<LegalEntityDetails> result;
    
    public CachedQuery(String key, List<LegalEntityDetails> result) {
        this.key = key;
        this.result = result;
    }
    
    public List<LegalEntityDetails> getResult() {
        return result;
    }
}
```

## Dependencies

- **JAX-RS** (`javax.ws.rs.*`): RESTful API framework.
- **Swagger Annotations** (`io.swagger.annotations.*`): API documentation.
- **Java EE Logger** (`java.util.logging.Logger`): Logs errors and debugging information.
- **Java Concurrency** (`java.util.concurrent.ConcurrentHashMap`): Used for caching.
- **Hibernate/JPA** (if used for ORM): Database interaction.
- **Jackson** (`com.fasterxml.jackson.*`): JSON serialization/deserialization.

## Database and Queries

- **Data Source**: EMMA system database.
- **Table Accessed**: `LegalEntityDetails`
- **Query Execution**: Handled in `EmmaLegalEntityDAO.fetchFromDatabase()`.
- **Caching Mechanism**: Uses `QueryCache` to store recent queries and avoid redundant database hits.

## Error Handling

- Logs errors using `Logger.error(e.getMessage(), e);`
- Returns appropriate HTTP status codes.
- Implements caching to improve performance and reliability.

## Conclusion

This API efficiently retrieves legal entity details using `radarPortfolioId`. The caching and query optimization reduce database load and improve response time. The layered architecture ensures maintainability and extensibility.
