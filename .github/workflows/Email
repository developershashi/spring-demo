import org.apache.camel.AttachmentMessage;
import org.apache.camel.Exchange;
import org.apache.camel.impl.DefaultAttachment;
import org.apache.commons.lang.StringUtils;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import javax.activation.DataHandler;
import org.slf4j.Logger;

public class ProcessorTest {

    private Processor processor;
    private Logger logger;

    @Before
    public void setUp() {
        processor = new Processor();
        logger = Mockito.mock(Logger.class);
    }

    @Test
    public void testProcessWithNonEmptyContentAndFileName() {
        // Arrange
        Exchange exchange = createExchangeWithContentAndFileName("Sample Content", "sample.txt");

        // Act
        processor.process(exchange);

        // Assert
        Mockito.verify(logger).info("Email attachment processing complete for file sample.txt.");
    }

    @Test
    public void testProcessWithNonEmptyContentAndEmptyFileName() {
        // Arrange
        Exchange exchange = createExchangeWithContentAndFileName("Sample Content", "");

        // Act
        processor.process(exchange);

        // Assert
        Mockito.verify(logger).info("Email attachment processing complete for file " + AppConstants.EMAIL_DEFAULT_ATTACHMENT_FILENAME + ".");
    }

    @Test
    public void testProcessWithEmptyContent() {
        // Arrange
        Exchange exchange = createExchangeWithContentAndFileName("", "sample.txt");

        // Act
        processor.process(exchange);

        // Assert
        Mockito.verify(logger).info("Email attachment processing complete for file sample.txt.");
    }

    @Test
    public void testProcessWithEmptyContentAndEmptyFileName() {
        // Arrange
        Exchange exchange = createExchangeWithContentAndFileName("", "");

        // Act
        processor.process(exchange);

        // Assert
        Mockito.verify(logger).info("Email attachment processing complete for file " + AppConstants.EMAIL_DEFAULT_ATTACHMENT_FILENAME + ".");
    }

    // Helper method to create a mock Exchange with the desired content and fileName
    private Exchange createExchangeWithContentAndFileName(String content, String fileName) {
        Exchange exchange = Mockito.mock(Exchange.class);
        AttachmentMessage attachmentMessage = Mockito.mock(AttachmentMessage.class);

        Mockito.when(exchange.getIn()).thenReturn(attachmentMessage);
        Mockito.when(exchange.hasOutAttachments()).thenReturn(false);
        Mockito.when(exchange.getOut().getAttachmentObjects()).thenReturn(Mockito.mock(Map.class));

        Mockito.when(exchange.getIn().getBody(String.class)).thenReturn(content);

        Mockito.when(attachmentMessage.getHeader(Exchange.FILE_NAME, String.class)).thenReturn(fileName);

        return exchange;
    }
}
