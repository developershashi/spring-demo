import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import static org.mockito.Mockito.*;

class DataProcessorTest {

    private PaymentService paymentService;
    private DataProcessor dataProcessor;

    @BeforeEach
    void setUp() {
        paymentService = mock(PaymentService.class);
        dataProcessor = new DataProcessor(paymentService, producerTemplate, objectMapper);
    }

    @Test
    void testUpdatePaymentInfoStatus_SuccessfulUpdate() {
        Map<String, Object> gpsRequestMap = new HashMap<>();
        gpsRequestMap.put(CASH_MOVEMENT_MODEL, Collections.singletonMap(SOURCE_REFERENCE, "transaction123"));

        when(paymentService.updateOpenTransactionsToInProcess("transaction123")).thenReturn(Optional.of(mock(PaymentInfo.class)));

        dataProcessor.updatePaymentInfoStatus(gpsRequestMap);

        verify(paymentService).updateOpenTransactionsToInProcess("transaction123");
    }

    @Test
    void testUpdatePaymentInfoStatus_FailedUpdate() {
        Map<String, Object> gpsRequestMap = new HashMap<>();
        gpsRequestMap.put(CASH_MOVEMENT_MODEL, Collections.singletonMap(SOURCE_REFERENCE, "transaction456"));

        when(paymentService.updateOpenTransactionsToInProcess("transaction456")).thenReturn(Optional.empty());

        dataProcessor.updatePaymentInfoStatus(gpsRequestMap);

        verify(paymentService).updateOpenTransactionsToInProcess("transaction456");
    }

    // Add more test cases for various scenarios (null gpsRequestMap, missing keys, empty transactionId, etc.)
}



/////////

public void updatePaymentInfoStatus(Map<String, Object> gpsRequestMap) {
    if (gpsRequestMap == null) {
        log.error("GPS request map is null. Cannot process.");
        return;
    }

    Map<String, Object> cashMovementModelMap = (Map<String, Object>) gpsRequestMap.getOrDefault(CASH_MOVEMENT_MODEL, Collections.emptyMap());
    String transactionId = cashMovementModelMap.getOrDefault(SOURCE_REFERENCE, "").toString();

    if (transactionId.isEmpty()) {
        log.error("Transaction ID is null or empty. Cannot process.");
        return;
    }

    Optional<PaymentInfo> updatedPaymentInfo = paymentService.updateOpenTransactionsToInProcess(transactionId);

    if (updatedPaymentInfo.isPresent()) {
        log.info("Transaction data for transaction ID {} successfully updated into the database with status IN-PROCESS", transactionId);
    } else {
        log.error("Failed to update transaction data for transaction ID {} into the database with status IN-PROCESS", transactionId);
    }
}
