import org.apache.camel.ProducerTemplate;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import javax.jms.*;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

public class JmsSubscriberTest {

    @InjectMocks
    private JmsSubscriber jmsSubscriber;

    @Mock
    private ProducerTemplate producerTemplate;

    @Mock
    private Connection connection;

    @Mock
    private Session session;

    @Mock
    private MessageConsumer messageConsumer;

    @Mock
    private TextMessage textMessage;

    @Mock
    private BytesMessage bytesMessage;

    @BeforeEach
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testMessageListenerWithTextMessage() throws Exception {
        // Create a TextMessage mock
        when(textMessage.getText()).thenReturn("Test Text Message");
        when(messageConsumer.receive()).thenReturn(textMessage);

        jmsSubscriber.messageListener();

        verify(producerTemplate).sendBody(eq("direct:emsConsumer"), eq("Test Text Message"));
        verify(session).commit();
    }

    @Test
    public void testMessageListenerWithBytesMessage() throws Exception {
        // Create a BytesMessage mock
        byte[] bytes = "Test Bytes Message".getBytes();
        when(bytesMessage.getBodyLength()).thenReturn((long) bytes.length);
        when(bytesMessage.readBytes(any(byte[].class))).thenAnswer(invocation -> {
            byte[] targetArray = invocation.getArgument(0);
            System.arraycopy(bytes, 0, targetArray, 0, bytes.length);
            return bytes.length;
        });
        when(messageConsumer.receive()).thenReturn(bytesMessage);

        jmsSubscriber.messageListener();

        verify(producerTemplate).sendBody(eq("direct:emsConsumer"), eq("Test Bytes Message"));
        verify(session).commit();
    }

    @Test
    public void testMessageListenerWithUnexpectedMessageType() throws Exception {
        // Create a Message mock of an unexpected type
        Message unexpectedMessage = mock(Message.class);
        when(messageConsumer.receive()).thenReturn(unexpectedMessage);

        jmsSubscriber.messageListener();

        verify(producerTemplate, never()).sendBody(eq("direct:emsConsumer"), any());
        verify(session, never()).commit();
    }

    @Test
    public void testMessageListenerWithJMSException() throws Exception {
        when(messageConsumer.receive()).thenThrow(new JMSException("Test JMSException"));

        assertThrows(RuntimeException.class, () -> jmsSubscriber.messageListener());

        verify(producerTemplate, never()).sendBody(eq("direct:emsConsumer"), any());
        verify(session, never()).commit();
    }

    @Test
    public void testMessageListenerWithTextMessageAndJMSException() throws Exception {
        when(textMessage.getText()).thenReturn("Test Text Message");
        doThrow(new JMSException("Test JMSException")).when(session).commit();

        assertThrows(RuntimeException.class, () -> jmsSubscriber.messageListener());

        verify(producerTemplate, never()).sendBody(eq("direct:emsConsumer"), any());
        verify(session).rollback();
    }

    // Additional test cases to cover other branches...

    @Test
    public void testMessageListenerWithInvalidBytesMessage() throws Exception {
        // Create a BytesMessage mock with negative body length
        when(bytesMessage.getBodyLength()).thenReturn(-1L);
        when(messageConsumer.receive()).thenReturn(bytesMessage);

        jmsSubscriber.messageListener();

        verify(producerTemplate, never()).sendBody(eq("direct:emsConsumer"), any());
        verify(session, never()).commit();
    }

    // Add more test cases to cover other branches...

    @Test
    public void testMessageListenerWithMultipleMessages() throws Exception {
        // Create multiple TextMessage mocks
        TextMessage textMessage1 = mock(TextMessage.class);
        TextMessage textMessage2 = mock(TextMessage.class);
        when(textMessage1.getText()).thenReturn("Message 1");
        when(textMessage2.getText()).thenReturn("Message 2");

        when(messageConsumer.receive())
            .thenReturn(textMessage1)
            .thenReturn(textMessage2)
            .thenReturn(null);  // To simulate the end of messages

        jmsSubscriber.messageListener();

        verify(producerTemplate).sendBody(eq("direct:emsConsumer"), eq("Message 1"));
        verify(producerTemplate).sendBody(eq("direct:emsConsumer"), eq("Message 2"));
        verify(session, times(2)).commit();
    }

    // Add more test cases as needed to cover other branches...

}
